- AUTOMATED UNIT TESTS!!!!!!

- event queue and listeners 
    (NOTE: rxjs is good performance wise, but not so good wrt garbage collection (requires explicit unsubscribe))
- Mech details display (weapon damage summary)

- See if it's worth moving all the added data to a single json file and fetching it at runtime.
  The total script size is now around 600k (96k compressed) and may affect initial load time.
    One more reason to do this: Updates that affect addedData can be done without recompiling the app.
- Set up a build process to automatically update generated game data.

- LBX damage spread
- save team settings (on separate hash parameter)
- some omnimechs have no CT omnipod entry (HBR-F). See where to find this info.
- MG/HMG/LMG extra struct damage computation
- Ambient heat effects
- LBX crit effects (just the added damage)
- Flamer heat effects
- Exponential decrease for cLRM damage below minrange
- Targeting computer effects
- General quirks (heat dissipation done, others no effect on simulation)

- touchhandler-caused slowdown on real mobile devices (chrome mobile).
    To replicate: load page in portrait orientation, and scroll down by touching 
    one of the mech panels (triggering a touch handler). Animation slows down considerably
    compared to a version with touch handlers disabled.
    Current workaround: Only put in touchhandlers when a mechpanel is being moved. Seems to solve
    the performance issue.
- slow performance on dragover when there are many mechs (too much hit test and layouting, see what causes it)
    Appears to be a known bug (https://bugs.chromium.org/p/chromium/issues/detail?id=358218). Still,
    minimize paints and animations by avoiding huge paints in droptarget styles
